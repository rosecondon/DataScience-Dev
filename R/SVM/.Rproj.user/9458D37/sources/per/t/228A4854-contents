# use the ksvm or kknn function to find a good classifier:
# splitting the data intot raining, validation,and test dat asets(pick either KNN or SVM;the other is optional).

# Step1: clean env
rm(list = ls())
# Step2: load library kknn
library(kknn)
# Step3: get data and view Data - donot missing extra flags when using read_table
dataCV <- read.table("credit_card_data.txt", stringsAsFactors = FALSE, header = FALSE)
head(dataCV)
# Step4: set a random number to allow our results reproducible
set.seed(1)
# Step5: Transfer data to matrix. Missig this, you may get "Error in vanilladot"
dataCVMatrix <- data.matrix(dataCV) # May not need it here
# Step6: do cross-validation with spliiting dataset, splitting data sets first
# 1) data point rows
d.rows = nrow(dataCV) 
# Randomly selecting (1/3)rd rows among 654 rows
# d.sample = sample(1:d.rows, size = round(d.rows/3), replace = FALSE)

# 70% for training -- "sample" selects a sample of data points
mask_train = sample(nrow(dataCV), size = floor(nrow(dataCV) * 0.7)) # see mine
cred_train = dataCV[mask_train,] # training data set
# 30% remain is fo validation sets and test sets
mask_remain = dataCV[-mask_train, ]  # all rows except training  
# Split 50% of mask_remain for validation and test sets
mask_half = sample(nrow(mask_remain), size = floor(nrow(mask_remain)/2))
cred_val = mask_remain[mask_half,]  # validation data set
cred_test = mask_remain[-mask_half, ] # test data set

# Step7: Calculate accurracy for vector [29]
accurracy3 <- rep(0,29)  # 1-9 are SVM, 10-29 are KNN
# 1) Train SVM model
# values of C to test
amounts <- c(0.00001, 0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000) 
for (i in 1:9) {
  # fit model using training set
  model_svm <- ksvm(as.matrix(cred_train[,1:10]),
                       as.factor(cred_train[,11]),
                       type = "C-svc", # Use C-classification method
                       kernel = "vanilladot", # Use simple linear kernel
                       C = amounts[i],
                       scaled=TRUE) # have ksvm scale the data for you
  
  #  compare models using validation set
  
  pred <- predict(model_svm,cred_val[,1:10])
  accurracy3[i] = sum(pred == cred_val$V11) / nrow(cred_val)
}
accurracy3[1:9]
# find best-performing SVM model on validation data
cat("Best SVM model is number ",which.max(accurracy3[1:9]),"\n")
cat("Best C value is ",amounts[which.max(accurracy3[1:9])],"\n")
cat("Best validation set correctness is ",max(accurracy3[1:9]),"\n")

# retrain the best model (since we overwritten it above => C = amounts[i])
model_svm <- ksvm(as.matrix(cred_train[,1:10]),
                     as.factor(cred_train[,11]),
                     type = "C-svc", # Use C-classification method
                     kernel = "vanilladot", # Use simple linear kernel
                     C = amounts[which.max(accurracy3[1:9])],
                     scaled=TRUE) # have ksvm scale the data for you
cat("Performance on test data = ", sum(predict(model_svm, cred_test[,1:10]) == cred_test$V11) / nrow(cred_test),"\n")

# 2) Train KNN models 
for (k in 1:20) {
  # fit k-nearest-neighbor model using training set, and validate on test set
  knn_model <- kknn(V11~.,cred_train,cred_val,k=k,scale=TRUE)
  #  compare models using validation set
  pred <- as.integer(fitted(knn_model)+0.5) # round off to 0 or 1
  accurracy3[k+9] = sum(pred == cred_val$V11) / nrow(cred_val)
}
accurracy3[10:29]
cat("Best KNN model is k=",which.max(accurracy3[10:29]),"\n")
cat("Best validation set correctness is ",max(accurracy3[10:29]),"\n")

# Step 7: Evaluate overall best model on test data
if (which.max(accurracy3) <= 9)  {        # if a ksvm method is best (less than or equal to), as we set [0,9] is SVM predictions
  # evaluate the ksvm method on the test set to find estimated quality
  cat("Use ksvm with C = ",amounts[which.max(accurracy3[1:9])],"\n")
  cat("Test performace = ",sum(predict(model_svm,cred_test[,1:10]) == cred_test$V11) / nrow(cred_test),"\n")
} else {    # the best is a knn method
  # evaluate the knn method on the test set to find estimated quality
  cat("Use knn with k = ",which.max(accurracy3[10:29]),"\n")
  cat("Test performance = ",sum(pred == cred_val$V11) / nrow(cred_val),"\n")
}